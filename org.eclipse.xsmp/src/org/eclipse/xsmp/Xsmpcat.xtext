/*******************************************************************************
* Copyright (C) 2020-2022 THALES ALENIA SPACE FRANCE.
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License 2.0
* which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
******************************************************************************/

grammar org.eclipse.xsmp.Xsmpcat hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://org.eclipse.xsmp/xcatalogue"

Catalogue:
	metadatum=Metadatum
	'catalogue' name=ValidID
	importSection=ImportSection?
	member+=Namespace*;

ImportSection:
	importDeclarations+=ImportDeclaration+;

ImportDeclaration:
	'import' (importedType=[LanguageType|QualifiedName]
	| 'namespace' importedNamespace=[Namespace|QualifiedName]);

Attribute:
    AttributeDeclaration (=>'(' value=Expression? ')')?;

fragment AttributeDeclaration * hidden(ML_COMMENT, SL_COMMENT):
	'@' (type=[Type|QualifiedName] | WS);


Metadatum:
	{Metadatum}
	documentation=ML_DOCUMENTATION?
	metadata+=Attribute*;

Namespace returns ecore::EObject:
	{Metadatum}
	documentation=ML_DOCUMENTATION?
	metadata+=Attribute*
	{Namespace.metadatum=current} NamespaceDeclaration;

enum RangeKind:
	Inclusive='...' | MinInclusive='..<' | MaxInclusive='<..' | Exclusive='<.<';


fragment NamespaceDeclaration *:
	'namespace' name=ValidID
	'{'
	member+=NamespaceMember*
	'}';

fragment StructureDeclaration *:
	modifiers+=VisibilityModifiers*
	'struct' name=ValidID
	StructBody;

fragment StructBody *:
	'{'
	member+=StructMember*
	'}';

fragment ClassDeclaration *:
	modifiers+=ClassModifiers*
	'class' name=ValidID (=>'extends' base=[Type|QualifiedName])?
	ClassBody;

fragment ClassBody *:
	'{'
	member+=ClassMember*
	'}';

fragment ExceptionDeclaration *:
	modifiers+=ClassModifiers*
	'exception' name=ValidID (=>'extends' base=[Type|QualifiedName])?
	ClassBody;

fragment InterfaceDeclaration *:
	modifiers+=VisibilityModifiers*
	'interface' name=ValidID (=>'extends' base+=[Type|QualifiedName] (=>',' base+=[Type|QualifiedName])*)?
	InterfaceBody;

fragment InterfaceBody *:
	'{'
	member+=InterfaceMember*
	'}';

fragment ModelDeclaration *:
	modifiers+=ClassModifiers*
	'model' name=ValidID (=>'extends' base=[Type|QualifiedName])? (=>'implements' interface+=[Type|QualifiedName] (=>','
	interface+=[Type|QualifiedName])*)?
	ComponentBody;

fragment ComponentBody *:
	'{'
	member+=ComponentMember*
	'}';

fragment ServiceDeclaration *:
	modifiers+=ClassModifiers*
	'service' name=ValidID (=>'extends' base=[Type|QualifiedName])? (=>'implements' interface+=[Type|QualifiedName] (=>','
	interface+=[Type|QualifiedName])*)?
	ComponentBody;

fragment ArrayDeclaration *:
	modifiers+=VisibilityModifiers*
	(=>('array' | 'using') name=ValidID '='
	itemType=[Type|QualifiedName] '[') size=Expression? ']';

fragment ValueReferenceDeclaration *:
	modifiers+=VisibilityModifiers*
	'using' name=ValidID '=' type=[Type|QualifiedName] '*';

fragment IntegerDeclaration *:
	modifiers+=VisibilityModifiers*
	'integer' name=ValidID (=>'extends' primitiveType=[Type|QualifiedName])? (=>'in' (minimum=Expression | '*') '...'
	(maximum=Expression | '*'))?;

fragment FloatDeclaration *:
	modifiers+=VisibilityModifiers*
	'float' name=ValidID (=>'extends' primitiveType=[Type|QualifiedName])? (=>'in' (minimum=Expression | '*')
	range=RangeKind (maximum=Expression | '*'))?;

fragment EventDeclaration *:
	modifiers+=VisibilityModifiers*
	'event' name=ValidID (=>'extends' eventArgs=[Type|QualifiedName])?;

fragment StringDeclaration *:
	modifiers+=VisibilityModifiers*
	'string' name=ValidID '[' length=Expression? ']';

fragment PrimitiveDeclaration *:
	modifiers+=VisibilityModifiers*
	'primitive' name=ValidID;

fragment NativeDeclaration *:
	modifiers+=VisibilityModifiers*
	'native' name=ValidID;

// This rule is deprecated and will be removed in a future release.
// use AttributeTypeDeclaration
// TODO to be removed
fragment AttributeTypeDeclarationDeprecated *:
    modifiers+=VisibilityModifiers*
    'attribute' name=ValidID
    '{'
    type=[ValueType|QualifiedName] ValidID '?'? ('=' default=Expression)?
    '}';
fragment AttributeTypeDeclaration *:
    modifiers+=VisibilityModifiers*
    'attribute' modifiers+=VisibilityModifiers* type=[ValueType|QualifiedName] name=ValidID (=>'=' default=Expression)?;
    
fragment EnumerationDeclaration *:
	modifiers+=VisibilityModifiers*
	'enum' name=ValidID
	'{'
	(literal+=EnumerationLiteral (',' literal+=EnumerationLiteral)* (',')?)?
	'}';

fragment ConstantDeclaration *:
	modifiers+=VisibilityModifiers*
	'constant' modifiers+=VisibilityModifiers* type=[Type|QualifiedName] name=ValidID (=>'=' value=Expression)?;

NamespaceMember returns ecore::EObject:
	{Metadatum}
	documentation=ML_DOCUMENTATION?
	metadata+=Attribute*
	({Namespace.metadatum=current} NamespaceDeclaration
	|
	{Structure.metadatum=current} StructureDeclaration
	|
	{Class.metadatum=current} ClassDeclaration
	|
	{Exception.metadatum=current} ExceptionDeclaration
	|
	{Interface.metadatum=current} InterfaceDeclaration
	|
	{Model.metadatum=current} ModelDeclaration
	|
	{Service.metadatum=current} ServiceDeclaration
	|
	{Array.metadatum=current} ArrayDeclaration
	|
	{ValueReference.metadatum=current} ValueReferenceDeclaration
	|
	{Integer.metadatum=current} IntegerDeclaration
	|
	{Float.metadatum=current} FloatDeclaration
	|
	{EventType.metadatum=current} EventDeclaration
	|
	{String.metadatum=current} StringDeclaration
	|
	{PrimitiveType.metadatum=current} PrimitiveDeclaration
	|
	{NativeType.metadatum=current} NativeDeclaration
	|
	{AttributeType.metadatum=current} AttributeTypeDeclaration
	|
	{Enumeration.metadatum=current} EnumerationDeclaration
	 |
	 // TODO to be removed in a future release
	{AttributeType.metadatum=current} AttributeTypeDeclarationDeprecated);

fragment PropertyDeclaration *:
	modifiers+=PropertyModifiers*
	'property' modifiers+=VisibilityModifiers* type=[Type|QualifiedName] name=ValidID
	(=>'get' 'throws' getRaises+=[Type|QualifiedName] (',' getRaises+=[Type|QualifiedName])*)?
	(=>'set' 'throws' setRaises+=[Type|QualifiedName] (',' setRaises+=[Type|QualifiedName])*)?
	('->' attachedField=[Field|QualifiedName])?;

fragment OperationDeclaration *:
	modifiers+=VisibilityModifiers*
	'def' modifiers+=VisibilityModifiers*
	(returnParameter=ReturnParameter | 'void')
	name=ValidID
	'(' (parameter+=Parameter (',' parameter+=Parameter)*)? ')'
	(=>'throws' raisedException+=[Type|QualifiedName] (',' raisedException+=[Type|QualifiedName])*)?;

InterfaceMember returns ecore::EObject:
	{Metadatum}
	documentation=ML_DOCUMENTATION?
	metadata+=Attribute*
	({Constant.metadatum=current} ConstantDeclaration
	|
	{Property.metadatum=current} PropertyDeclaration
	|
	{Operation.metadatum=current} OperationDeclaration);

fragment FieldDeclaration *:
	modifiers+=FieldModifiers*
	'field' modifiers+=VisibilityModifiers* type=[Type|QualifiedName] name=ValidID (=>'=' default=Expression)?;

StructMember returns ecore::EObject:
	{Metadatum}
	documentation=ML_DOCUMENTATION?
	metadata+=Attribute*
	({Constant.metadatum=current} ConstantDeclaration
	|
	{Field.metadatum=current} FieldDeclaration);

fragment AssociationDeclaration *:
	modifiers+=VisibilityModifiers*
	'association' modifiers+=VisibilityModifiers* type=[Type|QualifiedName] name=ValidID;

ClassMember returns ecore::EObject:
	{Metadatum}
	documentation=ML_DOCUMENTATION?
	metadata+=Attribute*
	({Constant.metadatum=current} ConstantDeclaration
	|
	{Field.metadatum=current} FieldDeclaration
	|
	{Property.metadatum=current} PropertyDeclaration
	|
	{Operation.metadatum=current} OperationDeclaration
	|
	{Association.metadatum=current} AssociationDeclaration);

fragment ContainerDeclaration *:
	'container' type=[Type|QualifiedName] MultiplicityDeclaration name=ValidID (=>'='
	defaultComponent=[Type|QualifiedName])?;

fragment ReferenceDeclaration *:
	'reference' interface=[Type|QualifiedName] MultiplicityDeclaration name=ValidID;

fragment EntryPointDeclaration *:
	'entrypoint' name=ValidID
	('{'
	('->' input+=[Field|QualifiedName] | '<-' output+=[Field|QualifiedName])*
	'}')?;

fragment EventSinkDeclaration *:
	'eventsink' type=[Type|QualifiedName] name=ValidID;

fragment EventSourceDeclaration *:
	'eventsource' type=[Type|QualifiedName] name=ValidID;

ComponentMember returns ecore::EObject:
	{Metadatum}
	documentation=ML_DOCUMENTATION?
	metadata+=Attribute*
	({Field.metadatum=current} FieldDeclaration
	|
	{Constant.metadatum=current} ConstantDeclaration
	|
	{Association.metadatum=current} AssociationDeclaration
	|
	{Property.metadatum=current} PropertyDeclaration
	|
	{Container.metadatum=current} ContainerDeclaration
	|
	{Reference.metadatum=current} ReferenceDeclaration
	|
	{EntryPoint.metadatum=current} EntryPointDeclaration
	|
	{EventSink.metadatum=current} EventSinkDeclaration
	|
	{EventSource.metadatum=current} EventSourceDeclaration
	|
	{Operation.metadatum=current} OperationDeclaration);

fragment MultiplicityDeclaration *:
	optional?='?' | multiplicity=Multiplicity?;

Multiplicity:
	{Multiplicity}
	'[' ((lower=Expression ('...' (aux?='*' | upper=Expression))?) |
	aux?='+'
	| '*')? ']';

VisibilityModifiers:
	'private' | 'protected' | 'public';

ClassModifiers:
	VisibilityModifiers | 'abstract';

PropertyModifiers:
	VisibilityModifiers | 'readWrite' | 'readOnly' | 'writeOnly';

FieldModifiers:
	VisibilityModifiers | 'input' | 'output' | 'transient';

EnumerationLiteral:
	metadatum=Metadatum
	name=ValidID '=' value=Expression;

ParameterMetadatum returns Metadatum: 
    {Metadatum}
    // do not provide documentation at parameter level( see @param tag in operation)
    // documentation=ML_DOCUMENTATION?
    metadata+=Attribute*;
    
ReturnParameter returns Parameter:
	metadatum=ParameterMetadatum
	type=[Type|QualifiedName] name=ValidID?;

Parameter:
	metadatum=ParameterMetadatum
	(=>direction=ParameterDirectionKind type=[Type|QualifiedName] | type=[Type|QualifiedName]) name=ValidID ('='
	default=Expression)?;

enum ParameterDirectionKind:
	in='in' | out='out' | inout='inout';

ValidID:
	ID | 'extends' | 'implements' | 'in' | 'out' | 'inout' | 'exception' | 'model' | 'service' | 'interface' | 'string'
	| 'native' | 'primitive' | 'attribute' | 'integer' | 'catalogue' | 'entrypoint' | 'field' | 'container' |
	'reference' | 'eventsink' | 'eventsource' | 'property' | 'association' | 'constant' | 'input' | 'output' |
	'transient' | 'event' | 'def' | 'abstract' | 'get' | 'set' | 'readWrite' | 'readOnly' | 'writeOnly' |
	'import' | 'array';

QualifiedName:
	ValidID (=>'.' ValidID)*;


Expression:
	OrExpression;


OrExpression returns Expression:
	AndExpression (=>({BinaryOperation.leftOperand=current} feature=OpOr) rightOperand=AndExpression)*;

OpOr:
	'||';

AndExpression returns Expression:
	BitwiseOrExpression (=>({BinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=BitwiseOrExpression)*;

OpAnd:
	'&&';

BitwiseOrExpression returns Expression:
	BitwiseXorExpression (=>({BinaryOperation.leftOperand=current} feature=OpBitwiseOr)
	rightOperand=BitwiseXorExpression)*;

OpBitwiseOr:
	'|';

BitwiseXorExpression returns Expression:
	BitwiseAndExpression (=>({BinaryOperation.leftOperand=current} feature=OpBitwiseXor)
	rightOperand=BitwiseAndExpression)*;

OpBitwiseXor:
	'^';

BitwiseAndExpression returns Expression:
	EqualityExpression (=>({BinaryOperation.leftOperand=current} feature=OpBitwiseAnd) rightOperand=EqualityExpression)*
;

OpBitwiseAnd:
	'&';

EqualityExpression returns Expression:
	RelationalExpression (=>({BinaryOperation.leftOperand=current} feature=OpEquality)
	rightOperand=RelationalExpression)*;

OpEquality:
	'==' | '!=';

RelationalExpression returns Expression:
	AdditiveExpression
	(=>({BinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=BitwiseExpression)*;

OpCompare:
	'>=' | '<=' | '>' | '<';

BitwiseExpression returns Expression:
	AdditiveExpression (=>({BinaryOperation.leftOperand=current} feature=OpBitwise)
	rightOperand=AdditiveExpression)*;

OpBitwise:
	'<<' | '>>';

AdditiveExpression returns Expression:
	MultiplicativeExpression (=>({BinaryOperation.leftOperand=current} feature=OpAdd)
	rightOperand=MultiplicativeExpression)*;

OpAdd:
	'+' | '-';

MultiplicativeExpression returns Expression:
	UnaryOperation (=>({BinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=UnaryOperation)*;

OpMulti:
	'*' | '/' | '%';

UnaryOperation returns Expression:
	{UnaryOperation} feature=OpUnary operand=UnaryOperation | Literal;

OpUnary:
	"!" | "-" | "+" | "~";

EnumerationLiteralReference returns Expression:
	{EnumerationLiteralReference} value=[NamedElement|QualifiedName];

Literal returns Expression:
	CollectionLiteral | FloatingLiteral | IntegerLiteral | StringLiteral | CharacterLiteral | BooleanLiteral |
	ParenthesizedExpression |
	EnumerationLiteralReference | BuiltInConstant | BuiltInFunction;

ParenthesizedExpression returns Expression:
	{ParenthesizedExpression} '(' expr=Expression ')';

CollectionLiteral:
	{CollectionLiteral} '{' (elements+=Expression (',' elements+=Expression)* (',')?)? '}';

IntegerLiteral returns IntegerLiteral:
	{IntegerLiteral} text=INTEGER_LITERAL;

FloatingLiteral returns FloatingLiteral:
	{FloatingLiteral} text=FLOATING_LITERAL;

StringLiteral returns Expression:
	{StringLiteral} value=STRING_LITERAL;

CharacterLiteral returns Expression:
	{CharacterLiteral} value=CHARACTER_LITERAL;

BuiltInConstant returns Expression:
	{BuiltInConstant} '$' name=ValidID;

BuiltInFunction returns Expression:
	{BuiltInFunction} '$' name=ValidID '(' (parameter+=Expression (',' parameter+=Expression)*)? ')';

BooleanLiteral returns Expression:
	{BooleanLiteral} ('false' | isTrue?='true');

terminal INTEGER_LITERAL:
	DECIMAL_LITERAL INTEGER_TIME_SUFFIX?
	| OCTAL_LITERAL INTEGER_TIME_SUFFIX?
	| HEXADECIMAL_LITERAL INTEGER_SUFFIX?
	| BINARY_LITERAL INTEGER_SUFFIX?;

terminal CHARACTER_LITERAL:
	('u' | 'U' | 'L')? '\'' CCHAR+ '\'';

terminal FLOATING_LITERAL:
	FRACTIONALCONSTANT EXPONENTPART? FLOATINGSUFFIX?
	| DIGITSEQUENCE EXPONENTPART FLOATINGSUFFIX?;

terminal STRING_LITERAL:
	ENCODINGPREFIX?
	('"' SCHAR* '"');

terminal fragment HEX_QUAD:
	HEXADECIMALDIGIT HEXADECIMALDIGIT HEXADECIMALDIGIT HEXADECIMALDIGIT;

terminal fragment UNIVERSAL_CHARACTER_NAME:
	'\\u' HEX_QUAD
	| '\\U' HEX_QUAD HEX_QUAD;

terminal ID:
	/*
	 *  ID_NONDIGIT | Identifier ID_NONDIGIT | Identifier DIGIT
	 */
	ID_NONDIGIT (ID_NONDIGIT | DIGIT)*;

terminal fragment ID_NONDIGIT:
	NONDIGIT | UNIVERSAL_CHARACTER_NAME;

terminal fragment NONDIGIT:
	('a'..'z') | ('A'..'Z') | ('_');

terminal fragment DIGIT:
	('0'..'9');

terminal DECIMAL_LITERAL:
	NONZERODIGIT ('\''? DIGIT)*;

terminal OCTAL_LITERAL:
	'0' ('\''? OCTALDIGIT)*;

terminal HEXADECIMAL_LITERAL:
	('0x' | '0X') HEXADECIMALDIGIT ('\''? HEXADECIMALDIGIT)*;

terminal BINARY_LITERAL:
	('0b' | '0B') BINARYDIGIT ('\''? BINARYDIGIT)*;

terminal fragment NONZERODIGIT:
	('1'..'9');

terminal fragment OCTALDIGIT:
	'0'..'7';

terminal fragment HEXADECIMALDIGIT:
	'0'..'9' | 'a'..'z' | 'A'..'Z';

terminal fragment BINARYDIGIT:
	'0' | '1';

terminal fragment INTEGER_SUFFIX:
	UNSIGNEDSUFFIX LONGSUFFIX?
	| LONGSUFFIX UNSIGNEDSUFFIX?;

terminal fragment INTEGER_TIME_SUFFIX:
	'ns' | 'us' | 'ms' | 's' | 'mn' | 'h' | 'd' | 'y' | INTEGER_SUFFIX;

terminal fragment UNSIGNEDSUFFIX:
	'u' | 'U';

terminal fragment LONGSUFFIX:
	'l' | 'L' | 'll' | 'LL';

terminal fragment CCHAR:
	// ~ ['\\\r\n]
	!('\'' | '\r' | '\n')
	| ESCAPESEQUENCE
	| UNIVERSAL_CHARACTER_NAME;

terminal fragment ESCAPESEQUENCE:
	SIMPLEESCAPESEQUENCE
	| OCTALESCAPESEQUENCE
	| HEXADECIMALESCAPESEQUENCE;

terminal fragment SIMPLEESCAPESEQUENCE:
	'\\\''
	| '\\"'
	| '\\?'
	| '\\\\'
	| '\\a'
	| '\\b'
	| '\\f'
	| '\\n'
	| '\\r'
	| ('\\' ('\r' '\n'? | '\n'))
	| '\\t'
	| '\\v';

terminal fragment OCTALESCAPESEQUENCE:
	'\\' OCTALDIGIT
	| '\\' OCTALDIGIT OCTALDIGIT
	| '\\' OCTALDIGIT OCTALDIGIT OCTALDIGIT;

terminal fragment HEXADECIMALESCAPESEQUENCE:
	'\\x' HEXADECIMALDIGIT+;

terminal fragment FRACTIONALCONSTANT:
	DIGITSEQUENCE? '.' DIGITSEQUENCE
	| DIGITSEQUENCE '.';

terminal fragment EXPONENTPART:
	('e' | 'E') SIGN? DIGITSEQUENCE;

terminal fragment SIGN:
	'+' | '-';

terminal fragment DIGITSEQUENCE:
	DIGIT ('\''? DIGIT)*;

terminal fragment FLOATINGSUFFIX:
	'f' | 'F' | 'l' | 'L';

terminal fragment ENCODINGPREFIX:
	'u8' | 'u' | 'U' | 'L';

terminal fragment SCHAR:
	// ~ ["\\\r\n]
	!('"' | '\\' | '\r' | '\n')
	| ESCAPESEQUENCE
	| UNIVERSAL_CHARACTER_NAME;


terminal WS:
	(' ' | '\t' | NEW_LINE)+;

terminal fragment NEW_LINE:
	('\r' '\n'? | '\n');

terminal ML_COMMENT:
	'/*' !'*'->'*/';

terminal ML_DOCUMENTATION:
	'/**'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;
